import { Q as PasskeyLinkHookOptions, T as PasskeyHookResult, V as PasskeyLoginHookOptions, X as SubmitPasskeyInput, P as PasskeyFlowState, E as ErrorCallback, a as AuthSuccessCallback } from './predicates-ec6173c7.js';
export { p as CreateEthereumEmbeddedWalletOpts, C as CreateOrRecoverEmbeddedWalletProps, r as CreateSolanaEmbeddedWalletOpts, u as CustomAuthFlowState, x as EmbeddedSolanaWalletActions, i as EmbeddedSolanaWalletState, y as EmbeddedSolanaWalletStatus, n as EmbeddedWallet, v as EmbeddedWalletActions, h as EmbeddedWalletState, w as EmbeddedWalletStatus, o as LinkedAccountWithMetadata, M as MfaConfig, k as OAuthFlowState, m as PrivyEmbeddedWalletAccount, q as RecoverEthereumEmbeddedWalletOpts, s as RecoverSolanaEmbeddedWalletOpts, R as RecoveryFlowState, t as SetRecoveryProps, U as User, K as hasError, z as isConnected, D as isConnecting, J as isCreating, H as isDisconnected, I as isNotCreated, B as isReconnecting, N as needsRecovery } from './predicates-ec6173c7.js';
import { PrivyUser } from '@privy-io/public-api';
export { PrivyAppleOauthAccount, PrivyBitcoinSegwitEmbeddedWalletAccount, PrivyBitcoinTaprootEmbeddedWalletAccount, PrivyCrossAppWalletAccount, PrivyCustomJwtAccount, PrivyDiscordOauthAccount, PrivyEmailAccount, PrivyEthereumAccount, PrivyEthereumEmbeddedWalletAccount, PrivyFarcasterAccount, PrivyGithubOauthAccount, PrivyGoogleOauthAccount, PrivyInstagramOauthAccount, PrivyLinkedAccount, PrivyLinkedInOauthAccount, PrivyPasskeyAccount, PrivyPhoneAccount, PrivySmartWalletAccount, PrivySolanaAccount, PrivySolanaEmbeddedWalletAccount, PrivySpotifyOauthAccount, PrivyTelegramAccount, PrivyTiktokOauthAccount, PrivyTwitterOauthAccount, PrivyUser } from '@privy-io/public-api';
import '@privy-io/js-sdk-core';

declare const useLinkWithPasskey: (opts?: PasskeyLinkHookOptions) => PasskeyHookResult<"link">;

declare const useLoginWithPasskey: (opts?: PasskeyLoginHookOptions) => PasskeyHookResult<"login">;

interface UseSignupWithPasskeyInterface {
    /**
     * Prompts the native flow to register a new passkey and creates a new user account from it.
     *
     * Relies on "sign up with passkey" being enabled on the App's dashboard settings.
     *
     * This will *not* log the user into an existing account, and will always create a new account.
     * Use `useLoginWithPasskey` if you want to log in with an existing passkey.
     */
    signupWithPasskey: (input: SubmitPasskeyInput) => Promise<{
        user: PrivyUser;
    }>;
    state: PasskeyFlowState;
}
interface UseSignupWithPasskeyOptions {
    onError?: ErrorCallback;
    onSuccess?: AuthSuccessCallback;
}
/**
 * A hook to sign up a new user using a passkey. This will create a brand new user account.
 *
 * Use `useLoginWithPasskey` if you want to log in with an existing passkey instead.
 */
declare const useSignupWithPasskey: (options?: UseSignupWithPasskeyOptions) => UseSignupWithPasskeyInterface;

export { UseSignupWithPasskeyInterface, UseSignupWithPasskeyOptions, useLinkWithPasskey, useLoginWithPasskey, useSignupWithPasskey };
