"use strict";Object.defineProperty(exports, "__esModule", {value: true});var _chunkSWAMTVZWjs = require('./chunk-SWAMTVZW.js');var _chunkWYJVIY4Ujs = require('./chunk-WYJVIY4U.js');var _chunkOWCFWPALjs = require('./chunk-OWCFWPAL.js');var _react = require('react');var _jssdkcore = require('@privy-io/js-sdk-core');var f=()=>{let e=_chunkSWAMTVZWjs.c.call(void 0, );return _react.useMemo.call(void 0, ()=>({createWallet(n){return _chunkOWCFWPALjs.d.call(void 0, this,null,function*(){let s=yield _jssdkcore.create.call(void 0, e,{request:{chain_type:n.chainType}}),{user:o}=yield e.user.get();return{user:o,wallet:s}})}}),[e])};var C=()=>{let e=_chunkSWAMTVZWjs.c.call(void 0, );return _react.useMemo.call(void 0, ()=>({signRawHash(M){return _chunkOWCFWPALjs.d.call(void 0, this,arguments,function*({address:n,chainType:s,hash:o}){let l=_chunkWYJVIY4Ujs.b.call(void 0, );if(!l)throw new (0, _jssdkcore.PrivyClientError)({code:"embedded_wallet_before_logged_in",error:"User must be authenticated before signing a raw hash"});let p=l.linked_accounts.filter(_jssdkcore.isEmbeddedWalletAccount).filter(_jssdkcore.isUnifiedWallet).filter(t=>t.chain_type===s).find(t=>t.address===n);if(!p)throw new (0, _jssdkcore.PrivyClientError)({code:"embedded_wallet_does_not_exist",error:"No embedded wallet found for the given address and chain type"});let r=yield _jssdkcore.rawSign.call(void 0, e,(...t)=>e.embeddedWallet.signWithUserSigner(...t),{wallet_id:p.id,params:{hash:o}});if(r.data&&"signature"in r.data&&r.data.encoding==="hex")return{signature:r.data.signature};throw new Error("Failed to sign")})}}),[e])};exports.useCreateWallet = f; exports.useSignRawHash = C;
